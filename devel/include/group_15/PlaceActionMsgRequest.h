// Generated by gencpp from file group_15/PlaceActionMsgRequest.msg
// DO NOT EDIT!


#ifndef GROUP_15_MESSAGE_PLACEACTIONMSGREQUEST_H
#define GROUP_15_MESSAGE_PLACEACTIONMSGREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace group_15
{
template <class ContainerAllocator>
struct PlaceActionMsgRequest_
{
  typedef PlaceActionMsgRequest_<ContainerAllocator> Type;

  PlaceActionMsgRequest_()
    : bowl_name()
    , bin_name()
    , x(0.0)
    , y(0.0)
    , orientation()  {
    }
  PlaceActionMsgRequest_(const ContainerAllocator& _alloc)
    : bowl_name(_alloc)
    , bin_name(_alloc)
    , x(0.0)
    , y(0.0)
    , orientation(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _bowl_name_type;
  _bowl_name_type bowl_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _bin_name_type;
  _bin_name_type bin_name;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::group_15::PlaceActionMsgRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::group_15::PlaceActionMsgRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PlaceActionMsgRequest_

typedef ::group_15::PlaceActionMsgRequest_<std::allocator<void> > PlaceActionMsgRequest;

typedef boost::shared_ptr< ::group_15::PlaceActionMsgRequest > PlaceActionMsgRequestPtr;
typedef boost::shared_ptr< ::group_15::PlaceActionMsgRequest const> PlaceActionMsgRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::group_15::PlaceActionMsgRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::group_15::PlaceActionMsgRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace group_15

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::group_15::PlaceActionMsgRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::group_15::PlaceActionMsgRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::group_15::PlaceActionMsgRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::group_15::PlaceActionMsgRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::group_15::PlaceActionMsgRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::group_15::PlaceActionMsgRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::group_15::PlaceActionMsgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "542e5c8a20899f5d4d2e09325623074f";
  }

  static const char* value(const ::group_15::PlaceActionMsgRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x542e5c8a20899f5dULL;
  static const uint64_t static_value2 = 0x4d2e09325623074fULL;
};

template<class ContainerAllocator>
struct DataType< ::group_15::PlaceActionMsgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "group_15/PlaceActionMsgRequest";
  }

  static const char* value(const ::group_15::PlaceActionMsgRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::group_15::PlaceActionMsgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string bowl_name\n\
string bin_name\n\
float64 x\n\
float64 y\n\
string orientation\n\
";
  }

  static const char* value(const ::group_15::PlaceActionMsgRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::group_15::PlaceActionMsgRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bowl_name);
      stream.next(m.bin_name);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlaceActionMsgRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::group_15::PlaceActionMsgRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::group_15::PlaceActionMsgRequest_<ContainerAllocator>& v)
  {
    s << indent << "bowl_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.bowl_name);
    s << indent << "bin_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.bin_name);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "orientation: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GROUP_15_MESSAGE_PLACEACTIONMSGREQUEST_H
